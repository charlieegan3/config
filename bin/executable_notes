#!/usr/bin/env ruby

pwd = ENV["PWD"]

##############################################################################
# create index files
##############################################################################
list_items = []

all_dirs = Dir.glob("#{pwd}/**/*/")

dirs = ["#{pwd}/"]
all_dirs.each do |dir|
  dirs.push(dir)
end

# get any manually created indexes
dirs += Dir.glob("#{pwd}/**/index.md").map { |e| e.delete_suffix("index.md") }
dirs.uniq!

# make sure an index is in place
dirs.each do |dir|
  File.write(dir+"index.md", "index")
end

# create each index with TOC
dirs.each do |dir|
  items = { dirs: [], files: []}

  # list the files and dirs for the TOC
  Dir.glob("#{dir}*").each do |e|
    if File.directory?(e)
      if File.exists?(e+"/index.md")
        items[:dirs].push(["./"+e.split("/").last+"/index.md", e.split("/").last])
      else
        items[:dirs].push(e.split("/").last)
      end
    elsif e.include? ".md"
      unless e.include? "index.md"
        items[:files].push(["./"+e.split("/").last, e.split("/").last.delete_suffix(".md")])
      end
    end
  end

  # generate the markdown for the TOC
  markdown_lines = []
  if !items[:dirs].empty?
    markdown_lines.push("**Sections**\n")
    items[:dirs].sort_by { |e| e.kind_of?(Array) ? e[1] : e }.each do |i|
      if i.kind_of?(Array)
        markdown_lines.push("- [[#{i[0]}|#{i[1]}]]")
      else
        markdown_lines.push("- #{i}")
      end
    end
  end
  if !items[:files].empty?
    markdown_lines.push("\n**Pages**\n")
    items[:files].sort_by {|e|e[1]}.each do |i|
      markdown_lines.push("- [[#{i[0]}|#{i[1]}]]")
    end
  end

  index_name = dir.split("/").last
  content = "# #{index_name}\n\n" + markdown_lines.join("\n") +"\n"

  File.write(dir+"index.md", content)
end

##############################################################################
# create breadcrumbs
##############################################################################

Dir.glob("#{pwd}/**/*.md").each do |file|
  breadcrumbs = file.delete_prefix(pwd).split("/").reject {|e|e==""}
  if breadcrumbs.empty?
    next
  end

  breadcrumb_items = [
    [(breadcrumbs.length-1).times.map { |e| "../" }.join+"index", "Root"]
  ]
  breadcrumbs.each_with_index do |e, i|
    if i < breadcrumbs.length - 2
      breadcrumb_items.push([
        (breadcrumbs.length - i - 2).times.map { |e| "../" }.join + "index",
        e,
      ])
    end
  end


  if breadcrumbs.last != "index.md"
    if !breadcrumbs[-2].nil?
      breadcrumb_items.push(["./index", breadcrumbs[-2]])
    end
    breadcrumb_items.push(breadcrumbs.last.delete_suffix(".md"))
  else
    if breadcrumbs.length < 2
      next
    end
    breadcrumb_items.push(breadcrumbs[-2].delete_suffix(".md"))
  end

  links = breadcrumb_items.map do |e|
    if e.kind_of?(Array)
      "[[#{e[0]}|#{e[1]}]]"
    else
      e
    end
  end.join(" / ")

  new_content = "<sup>/ #{links}</sup>"

  lines = File.readlines(file).map(&:chomp)

  if lines.first.start_with? "<sup>"
    lines[0] = new_content
  else
    lines = lines.unshift("")
    lines = lines.unshift(new_content)
  end

  File.write(file, lines.join("\n"))
end
